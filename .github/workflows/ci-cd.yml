name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  JAVA_VERSION: '21'
  NODE_VERSION: '20'
  DOCKER_REGISTRY: docker.io

jobs:
  # Job 1: Compile and Test Backend
  backend-test:
    name: Backend - Compile and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
    
    - name: Compile backend
      run: mvn clean compile
    
    - name: Run backend tests
      run: mvn test

  # Job 2: Test Frontend
  frontend-test:
    name: Frontend - Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: webapp/package-lock.json
    
    - name: Install dependencies
      working-directory: ./webapp
      run: npm ci
    
    - name: Run frontend tests
      working-directory: ./webapp
      run: npm run test -- --watch=false --browsers=ChromeHeadless

  # Job 3: Build and Push Docker Images
  build-docker-images:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      run: |
        echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT
        echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
    
    # Build and push backend image
    - name: Build and push backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.backend
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/calculator-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/calculator-backend:${{ steps.meta.outputs.date }}-${{ steps.meta.outputs.sha_short }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    
    # Build and push frontend image
    - name: Build and push frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.frontend
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/calculator-frontend:latest
          ${{ secrets.DOCKER_USERNAME }}/calculator-frontend:${{ steps.meta.outputs.date }}-${{ steps.meta.outputs.sha_short }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Job 4: Deploy to VPS
  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: build-docker-images
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Copy docker-compose files to VPS
      uses: appleboy/scp-action@v0.1.5
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        source: "docker/*"
        target: ${{ secrets.DEPLOY_PATH }}
    
    - name: Deploy to VPS via SSH
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        script: |
          cd ${{ secrets.DEPLOY_PATH }}/docker
          
          # Export environment variables
          export DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
          export TAG=latest
          
          # Pull latest images
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml pull
          
          # Stop and remove old containers
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml down
          
          # Start new containers
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
          
          # Clean up old images
          docker image prune -f
          
          # Health check
          sleep 30
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml ps
          
          # Check if services are running
          if ! docker-compose -f docker-compose.yml -f docker-compose.prod.yml ps | grep -E "calculator-(backend|frontend).*Up"; then
            echo "Deployment failed - services are not running"
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml logs --tail=50
            exit 1
          fi
          
          echo "Deployment successful!"
          
          # Show service status
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml ps
          echo ""
          echo "Services are available at:"
          echo "- Frontend: http://${{ secrets.VPS_HOST }}"
          echo "- Backend API: http://${{ secrets.VPS_HOST }}:8080" 